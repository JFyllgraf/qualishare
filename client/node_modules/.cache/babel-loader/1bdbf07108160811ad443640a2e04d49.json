{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jespe\\\\OneDrive\\\\Skrivebord\\\\projects\\\\qualishare\\\\client\\\\src\\\\components\\\\Toolbar\\\\Toolbar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Label, Input } from 'reactstrap';\nimport './Toolbar.css';\nimport { highlight } from '../../Utility/Helpers';\nimport Quote from \"../../data_model/Quote\";\n\nfunction Toolbar({\n  codes,\n  selected,\n  handler,\n  emmitChange\n}) {\n  const [codeList, setCodeList] = useState(codes);\n  const [selectedCode, setSelectedCode] = useState(selected);\n  useEffect(() => {\n    handler(selectedCode);\n    setCodeList(codes);\n  }, [selectedCode, codes]);\n\n  function newSelection(event) {\n    let i;\n\n    for (i = 0; i < codeList.length; i++) {\n      if (codeList[i].getName() === event.target.value) {\n        setSelectedCode(codeList[i]);\n      }\n    }\n  }\n\n  const addQuote = event => {\n    event.preventDefault();\n    let selectedText = window.getSelection().toString();\n\n    if (selectedText === null || selectedText === undefined || selectedText === '') {\n      return null;\n    } else {\n      var quote = new Quote(selectedText, window.getSelection().anchorOffset, [selectedCode]); //looks dangerous, but should be fine\n\n      selectedCode.addQuote(quote);\n    }\n\n    highlight(selectedCode.getColor());\n    console.log(quote.getQuoteText(), quote.getQuoteOffset(), quote.getSummary()); //console.log(selectedCode.getName() + \": \" + selectedCode.getColor());\n  };\n\n  const removeQuote = event => {\n    event.preventDefault();\n    let text = window.getSelection().toString();\n    let quotes = selectedCode.getQuotes();\n\n    for (let i = 0; i < quotes.length; i++) {\n      if (quotes[i].getQuoteText() === text) {\n        selectedCode.removeQuote(quotes[i]);\n        document.execCommand('removeFormat', false, null);\n        break;\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"toolbar-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"toolbar-innerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Select Code: \"), React.createElement(\"select\", {\n    value: selectedCode.getName(),\n    onChange: newSelection,\n    className: \"toolbarSelect\",\n    type: \"select\",\n    name: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, codeList ? codeList.map(code => {\n    return React.createElement(\"option\", {\n      className: \"toolbarOption\",\n      key: code.getId(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, code.getName());\n  }) : null), React.createElement(\"a\", {\n    href: \"something\",\n    className: \"toolbarButton\",\n    onClick: addQuote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Apply\"), React.createElement(\"a\", {\n    href: \"something\",\n    className: \"toolbarButton\",\n    onClick: removeQuote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Remove\")));\n}\n\nexport default Toolbar;","map":{"version":3,"sources":["C:/Users/jespe/OneDrive/Skrivebord/projects/qualishare/client/src/components/Toolbar/Toolbar.js"],"names":["React","useState","useEffect","Button","Label","Input","highlight","Quote","Toolbar","codes","selected","handler","emmitChange","codeList","setCodeList","selectedCode","setSelectedCode","newSelection","event","i","length","getName","target","value","addQuote","preventDefault","selectedText","window","getSelection","toString","undefined","quote","anchorOffset","getColor","console","log","getQuoteText","getQuoteOffset","getSummary","removeQuote","text","quotes","getQuotes","document","execCommand","map","code","getId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Label, Input } from 'reactstrap';\r\n\r\nimport './Toolbar.css';\r\nimport { highlight } from '../../Utility/Helpers';\r\nimport Quote from \"../../data_model/Quote\";\r\n\r\n\r\nfunction Toolbar ({codes, selected, handler, emmitChange}) {\r\n  const [codeList, setCodeList] = useState(codes);\r\n  const [selectedCode, setSelectedCode] = useState(selected);\r\n\r\n  useEffect(() => {\r\n    handler(selectedCode);\r\n    setCodeList(codes);\r\n  }, [selectedCode, codes]);\r\n\r\n  function newSelection(event){\r\n    let i;\r\n    for (i = 0; i < codeList.length; i++) {\r\n      if (codeList[i].getName() === event.target.value){\r\n        setSelectedCode(codeList[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addQuote = (event) => {\r\n    event.preventDefault();\r\n    let selectedText = window.getSelection().toString();\r\n    if(selectedText === null || selectedText === undefined || selectedText ==='') {\r\n      return null\r\n    }\r\n    else {\r\n      var quote = new Quote(selectedText, window.getSelection().anchorOffset, [selectedCode]); //looks dangerous, but should be fine\r\n      selectedCode.addQuote(quote);\r\n    }\r\n    highlight(selectedCode.getColor());\r\n\r\n\r\n    console.log(quote.getQuoteText(), quote.getQuoteOffset(), quote.getSummary());\r\n    //console.log(selectedCode.getName() + \": \" + selectedCode.getColor());\r\n  };\r\n\r\n  const removeQuote = (event) => {\r\n    event.preventDefault();\r\n    let text = window.getSelection().toString();\r\n    let quotes = selectedCode.getQuotes();\r\n\r\n    for (let i = 0; i < quotes.length; i++){\r\n      if (quotes[i].getQuoteText() === text){\r\n        selectedCode.removeQuote(quotes[i]);\r\n        document.execCommand('removeFormat', false, null);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"toolbar-container\">\r\n      <div className=\"toolbar-innerContainer\">\r\n        <span className=\"label\">Select Code: </span>\r\n        <select value={selectedCode.getName()} onChange={newSelection} className=\"toolbarSelect\" type=\"select\" name=\"select\">\r\n          {\r\n            (codeList) ?\r\n            codeList.map(code => {\r\n              return <option className=\"toolbarOption\" key={code.getId()}>{code.getName()}</option>\r\n            }) :\r\n            null\r\n          }\r\n        </select>\r\n        <a href=\"something\" className=\"toolbarButton\" onClick={addQuote}>Apply</a>\r\n        <a href=\"something\" className=\"toolbarButton\" onClick={removeQuote}>Remove</a>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Toolbar;\r\n"]},"metadata":{},"sourceType":"module"}