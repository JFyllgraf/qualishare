{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jespe\\\\OneDrive\\\\Skrivebord\\\\projects\\\\qualishare\\\\client\\\\src\\\\components\\\\CodeToggle\\\\CodeToggle.js\";\nimport React, { useEffect, useState } from 'react';\nimport { FormGroup, CustomInput } from 'reactstrap';\nimport './CodeToggle.css';\nimport Code from '../../data_model/Code';\nimport io from \"socket.io-client\";\nlet socket;\n\nconst CodeToggle = ({\n  addCodeToList,\n  deleteCodeFromList,\n  getCodes,\n  addreceivedCode\n}) => {\n  const [codename, setcodeName] = useState('');\n  const [onChangeEvent, setonChangeEvent] = useState(); //const [newCode, setNewCode] = useState(undefined);\n\n  const ENDPOINT = 'localhost:5000';\n  socket = io(ENDPOINT); //is also onclick\n\n  const handleOnKeyUp = e => {\n    console.log(e.target.value);\n    e.preventDefault();\n    let newCode = new Code(e.target.value);\n    addCodeToList(newCode);\n    e.target.value = ''; //reset, at first this seemed like it was bad idea, but it works.\n\n    setonChangeEvent(undefined); //reset\n    //console.log(isCodeInList(newCode.getId()));\n  };\n\n  socket.on(\"newCode\", function (data) {\n    let receivedCode = JSON.parse(data);\n    console.log(\"Received Code\", receivedCode);\n\n    if (!isCodeInList(receivedCode._id)) {\n      let newCode = new Code(receivedCode._name);\n      newCode._id = receivedCode._id;\n      newCode._color = receivedCode._color; //addReceivedCodeToList(newCode);\n\n      addreceivedCode(newCode);\n    } //do nothing\n\n  });\n  socket.on(\"deleteCode\", function (data) {\n    let codes = getCodes();\n\n    for (let i = 0; i < codes.length; i++) {\n      if (codes[i].getName() === data) {\n        deleteCodeFromList(i);\n      }\n    }\n  });\n\n  function isCodeInList(id) {\n    let codes = getCodes();\n    let bool = false;\n\n    for (let i = 0; i < codes.length; i++) {\n      if (codes[i].getId() === id) {\n        bool = true;\n        break;\n      }\n    }\n\n    return bool;\n  }\n\n  const handleOnChange = e => {\n    e.preventDefault();\n    e.persist();\n    setonChangeEvent(e);\n    setcodeName(e.target.value);\n  };\n\n  const handleOnClick = e => {\n    e.preventDefault();\n    addCodeToList(new Code(codename));\n    onChangeEvent.target.value = ''; //reset\n\n    setonChangeEvent(undefined); //reset\n  };\n\n  const handleOnClickDeleteCode = () => {\n    let codes = getCodes();\n    let codeToDelete = onChangeEvent.target.value;\n\n    for (let i = 0; i < codes.length; i++) {\n      if (codes[i].getName() === codeToDelete) {\n        deleteCodeFromList(i);\n      }\n    }\n\n    onChangeEvent.target.value = ''; //reset\n\n    setonChangeEvent(undefined); //reset\n\n    socket.emit(\"deleteCode\", codeToDelete);\n  };\n\n  function CheckValidInput(e) {\n    if (onChangeEvent === undefined) {\n      return false;\n    }\n\n    let inputString = onChangeEvent.target.value;\n\n    if (inputString === '') {\n      return false;\n    }\n\n    let bool = true;\n    let codes = getCodes();\n    codes.map(code => {\n      if (code.getName() === inputString) {\n        bool = false;\n      }\n    });\n\n    if (e.target.id === \"deletebtn\") {\n      bool = !bool;\n    }\n\n    return bool;\n  }\n\n  function DisplayCode() {\n    let codes = getCodes();\n    return React.createElement(\"div\", {\n      className: \"code-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, codes.map(code => {\n      return React.createElement(\"div\", {\n        className: \"code\",\n        key: code.getId().toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"checkbox\",\n        id: code.getId().toString(),\n        label: code.getName(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"codeToggle-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Active Codes\"), React.createElement(\"div\", {\n    className: \"btn-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    className: \"toggleButton\",\n    id: \"addbtn\",\n    onClick: e => CheckValidInput(e) ? handleOnClick(e) : null,\n    color: \"dark\",\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"a\", {\n    className: \"toggleButton\",\n    id: \"deletebtn\",\n    onClick: e => CheckValidInput(e) ? handleOnClickDeleteCode(e) : null,\n    color: \"dark\",\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"-\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onChange: handleOnChange,\n    onKeyUpCapture: e => e.keyCode === 13 && CheckValidInput(e) ? handleOnKeyUp(e) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"code-list-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, DisplayCode())));\n};\n/*\r\n<CustomInput type=\"checkbox\" id=\"1\" label=\"Red\" />\r\n<CustomInput type=\"checkbox\" id=\"2\" label=\"Green\" />\r\n    <CustomInput type=\"checkbox\" id=\"3\" label=\"Blue\" />\r\n*/\n\n\nexport default CodeToggle;","map":{"version":3,"sources":["C:/Users/jespe/OneDrive/Skrivebord/projects/qualishare/client/src/components/CodeToggle/CodeToggle.js"],"names":["React","useEffect","useState","FormGroup","CustomInput","Code","io","socket","CodeToggle","addCodeToList","deleteCodeFromList","getCodes","addreceivedCode","codename","setcodeName","onChangeEvent","setonChangeEvent","ENDPOINT","handleOnKeyUp","e","console","log","target","value","preventDefault","newCode","undefined","on","data","receivedCode","JSON","parse","isCodeInList","_id","_name","_color","codes","i","length","getName","id","bool","getId","handleOnChange","persist","handleOnClick","handleOnClickDeleteCode","codeToDelete","emit","CheckValidInput","inputString","map","code","DisplayCode","toString","keyCode"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { FormGroup, CustomInput } from 'reactstrap';\r\nimport './CodeToggle.css';\r\nimport Code from '../../data_model/Code'\r\nimport io from \"socket.io-client\";\r\n\r\n\r\nlet socket;\r\nconst CodeToggle = ({addCodeToList, deleteCodeFromList, getCodes, addreceivedCode}) => {\r\n    const [codename, setcodeName] = useState('');\r\n    const [onChangeEvent, setonChangeEvent] = useState();\r\n    //const [newCode, setNewCode] = useState(undefined);\r\n\r\n    const ENDPOINT = 'localhost:5000';\r\n    socket = io(ENDPOINT);\r\n\r\n\r\n    //is also onclick\r\n    const handleOnKeyUp = (e) => {\r\n        console.log(e.target.value);\r\n        e.preventDefault();\r\n\r\n        let newCode = new Code(e.target.value);\r\n        addCodeToList(newCode);\r\n        e.target.value = ''; //reset, at first this seemed like it was bad idea, but it works.\r\n        setonChangeEvent(undefined); //reset\r\n        //console.log(isCodeInList(newCode.getId()));\r\n    };\r\n    socket.on(\"newCode\", function (data) {\r\n        let receivedCode = JSON.parse(data);\r\n        console.log(\"Received Code\", receivedCode);\r\n        if (!isCodeInList(receivedCode._id)){\r\n            let newCode = new Code(receivedCode._name);\r\n            newCode._id = receivedCode._id;\r\n            newCode._color = receivedCode._color;\r\n            //addReceivedCodeToList(newCode);\r\n            addreceivedCode(newCode);\r\n        }\r\n        //do nothing\r\n    });\r\n    socket.on(\"deleteCode\", function(data){\r\n        let codes = getCodes();\r\n\r\n        for (let i = 0; i < codes.length; i++){\r\n            if (codes[i].getName() === data){\r\n                deleteCodeFromList(i);\r\n            }\r\n        }\r\n    });\r\n    function isCodeInList(id){\r\n        let codes = getCodes();\r\n        let bool = false;\r\n\r\n        for (let i = 0; i < codes.length; i++){\r\n            if (codes[i].getId() === id){\r\n                bool = true;\r\n                break;\r\n            }\r\n        }\r\n        return bool;\r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n        e.preventDefault();\r\n        e.persist();\r\n        setonChangeEvent(e);\r\n        setcodeName(e.target.value);\r\n    };\r\n\r\n    const handleOnClick = (e) => {\r\n        e.preventDefault();\r\n\r\n        addCodeToList(new Code(codename));\r\n        onChangeEvent.target.value = ''; //reset\r\n        setonChangeEvent(undefined); //reset\r\n    };\r\n    const handleOnClickDeleteCode = () => {\r\n        let codes = getCodes();\r\n        let codeToDelete = onChangeEvent.target.value;\r\n\r\n        for (let i = 0; i < codes.length; i++){\r\n            if (codes[i].getName() === codeToDelete){\r\n                deleteCodeFromList(i);\r\n            }\r\n        }\r\n        onChangeEvent.target.value = '';//reset\r\n        setonChangeEvent(undefined)//reset\r\n        socket.emit(\"deleteCode\", codeToDelete);\r\n    };\r\n\r\n\r\n\r\n    function CheckValidInput(e){\r\n        if(onChangeEvent === undefined){\r\n            return false\r\n        }\r\n\r\n        let inputString = onChangeEvent.target.value;\r\n        if (inputString ===''){\r\n            return false\r\n        }\r\n\r\n        let bool = true;\r\n        let codes = getCodes();\r\n        codes.map((code) => {\r\n            if (code.getName() === inputString){\r\n                bool = false;\r\n            }\r\n        });\r\n\r\n        if(e.target.id === \"deletebtn\"){\r\n            bool = !bool;\r\n        }\r\n        return bool;\r\n    }\r\n\r\n    function DisplayCode() {\r\n        let codes = getCodes();\r\n        return (\r\n            <div className=\"code-list\">\r\n                {\r\n                    codes.map(code => {\r\n                        return (\r\n                            <div className=\"code\" key={code.getId().toString()}>\r\n                                <CustomInput type=\"checkbox\" id={code.getId().toString()} label={code.getName()}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"codeToggle-container\">\r\n\r\n      <h4>Active Codes</h4>\r\n      <div className=\"btn-group\">\r\n        <a className=\"toggleButton\"  id=\"addbtn\" onClick={(e) => CheckValidInput(e) ? handleOnClick(e) : null} color=\"dark\" size=\"sm\">+</a>\r\n        <a className=\"toggleButton\" id=\"deletebtn\" onClick={(e) => CheckValidInput(e) ? handleOnClickDeleteCode(e) : null} color=\"dark\" size=\"sm\">-</a>\r\n      </div>\r\n        <div><input type=\"text\" onChange={handleOnChange} onKeyUpCapture={(e) => e.keyCode===13 && CheckValidInput(e) ? handleOnKeyUp(e) : null}/></div>\r\n      <div className=\"code-list-container\">\r\n        <FormGroup check>\r\n            {DisplayCode()}\r\n        </FormGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n/*\r\n<CustomInput type=\"checkbox\" id=\"1\" label=\"Red\" />\r\n<CustomInput type=\"checkbox\" id=\"2\" label=\"Green\" />\r\n    <CustomInput type=\"checkbox\" id=\"3\" label=\"Blue\" />\r\n*/\r\n\r\n\r\n\r\nexport default CodeToggle;\r\n"]},"metadata":{},"sourceType":"module"}