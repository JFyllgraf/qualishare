{"ast":null,"code":"const summary_length = 5;\n\nclass Quote {\n  constructor(quoteText, quoteOffset, codeRef) {\n    const _quoteText = quoteText;\n    const _quoteOffset = quoteOffset;\n    const _codeRefs = [...codeRef];\n\n    const _summary = quoteText.match(/([\\w]*\\s|[\\w]*)/gm).splice(0, summary_length).toString(); //index out of range is not a problem, will always return at most\n    // summary_length number of words\n\n\n    this.getQuoteText = function () {\n      return _quoteText;\n    };\n\n    this.getQuoteOffset = function () {\n      return _quoteOffset;\n    };\n\n    this.getCodeRefs = function () {\n      return _codeRefs;\n    };\n\n    this.getSummary = function () {\n      return _summary;\n    };\n  }\n\n} //const quote1 = new Quote(\"This is a really random summary text of which we would like to have the five first words returned\", 2, [5]);\n//console.log(quote1.getSummary().toString());\n\n\nexport default Quote;","map":{"version":3,"sources":["C:/Users/jespe/OneDrive/Skrivebord/projects/qualishare/client/src/data_model/Quote.js"],"names":["summary_length","Quote","constructor","quoteText","quoteOffset","codeRef","_quoteText","_quoteOffset","_codeRefs","_summary","match","splice","toString","getQuoteText","getQuoteOffset","getCodeRefs","getSummary"],"mappings":"AAAA,MAAMA,cAAc,GAAG,CAAvB;;AACA,MAAMC,KAAN,CAAY;AAERC,EAAAA,WAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,OAAzB,EAAkC;AACzC,UAAMC,UAAU,GAAGH,SAAnB;AACA,UAAMI,YAAY,GAAGH,WAArB;AACA,UAAMI,SAAS,GAAG,CAAC,GAAGH,OAAJ,CAAlB;;AACA,UAAMI,QAAQ,GAAGN,SAAS,CAACO,KAAV,CAAgB,mBAAhB,EAAqCC,MAArC,CAA4C,CAA5C,EAA+CX,cAA/C,EAA+DY,QAA/D,EAAjB,CAJyC,CAImD;AAC1B;;;AAClE,SAAKC,YAAL,GAAoB,YAAY;AAAE,aAAOP,UAAP;AAAoB,KAAtD;;AACA,SAAKQ,cAAL,GAAsB,YAAY;AAAE,aAAOP,YAAP;AAAsB,KAA1D;;AACA,SAAKQ,WAAL,GAAmB,YAAY;AAAE,aAAOP,SAAP;AAAmB,KAApD;;AACA,SAAKQ,UAAL,GAAkB,YAAY;AAAE,aAAOP,QAAP;AAAkB,KAAlD;AACH;;AAZO,C,CAeZ;AACA;;;AACA,eAAeR,KAAf","sourcesContent":["const summary_length = 5;\r\nclass Quote {\r\n\r\n    constructor(quoteText, quoteOffset, codeRef) {\r\n        const _quoteText = quoteText;\r\n        const _quoteOffset = quoteOffset;\r\n        const _codeRefs = [...codeRef];\r\n        const _summary = quoteText.match(/([\\w]*\\s|[\\w]*)/gm).splice(0, summary_length).toString(); //index out of range is not a problem, will always return at most\r\n                                                                          // summary_length number of words\r\n        this.getQuoteText = function () { return _quoteText; };\r\n        this.getQuoteOffset = function () { return _quoteOffset; };\r\n        this.getCodeRefs = function () { return _codeRefs; };\r\n        this.getSummary = function () { return _summary; };\r\n    }\r\n}\r\n\r\n//const quote1 = new Quote(\"This is a really random summary text of which we would like to have the five first words returned\", 2, [5]);\r\n//console.log(quote1.getSummary().toString());\r\nexport default Quote;"]},"metadata":{},"sourceType":"module"}